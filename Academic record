{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pVUNw_Qkcz_E"
      },
      "outputs": [],
      "source": [
        "!pip install ucimlrepo\n",
        "from ucimlrepo import fetch_ucirepo\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from scipy import stats\n",
        "\n",
        "student_performance = fetch_ucirepo(id=320)\n",
        "data = pd.concat([student_performance.data.features, student_performance.data.targets], axis=1)\n",
        "X = data.drop(columns=['G3'])\n",
        "y = data['G3']\n",
        "X = pd.get_dummies(X, drop_first=True).astype(float)\n",
        "y = y.astype(float)\n",
        "Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "Xtrain_np = np.column_stack([np.ones(Xtrain.shape[0]), Xtrain.values])\n",
        "Xtest_np = np.column_stack([np.ones(Xtest.shape[0]), Xtest.values])\n",
        "\n",
        "model = LinearRegression(fit_intercept=False)\n",
        "model.fit(Xtrain_np, ytrain)\n",
        "ypred = model.predict(Xtest_np)\n",
        "\n",
        "r2 = r2_score(ytest, ypred)\n",
        "mse = mean_squared_error(ytest, ypred)\n",
        "residuals = ytest.to_numpy().ravel() - ypred.ravel()\n",
        "n = Xtest_np.shape[0]\n",
        "p = Xtest_np.shape[1]\n",
        "\n",
        "mse_train = mean_squared_error(ytrain, model.predict(Xtrain_np))\n",
        "XTX_inv = np.linalg.inv(Xtrain_np.T @ Xtrain_np)\n",
        "var_b = mse_train * np.diag(XTX_inv)\n",
        "se_b = np.sqrt(var_b)\n",
        "coeffs = model.coef_\n",
        "t_stats = coeffs / se_b\n",
        "p_values = 2 * (1 - stats.t.cdf(np.abs(t_stats), df=n - p))\n",
        "\n",
        "feature_names = ['Intercept'] + list(X.columns)\n",
        "results = pd.DataFrame({\n",
        "    'Feature': feature_names,\n",
        "    'Coefficient': coeffs,\n",
        "    'Std Error': se_b,\n",
        "    't-Statistic': t_stats,\n",
        "    'p-Value': p_values\n",
        "})\n",
        "\n",
        "pd.set_option('display.max_rows', None)\n",
        "print(results)\n",
        "print(f\"\\nR-squared: {r2:.4f}\")\n",
        "print(f\"Mean Squared Error: {mse:.4f}\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install ucimlrepo\n",
        "from ucimlrepo import fetch_ucirepo\n",
        "student_performance = fetch_ucirepo(id=320)\n",
        "X = student_performance.data.features\n",
        "y = student_performance.data.targets\n",
        "\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split, cross_val_score\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from sklearn.datasets import make_regression\n",
        "\n",
        "\n",
        "X, y = make_regression(n_samples=100, n_features=1, noise=0.1, random_state=42)\n",
        "\n",
        "\n",
        "Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "model = LinearRegression()\n",
        "model.fit(Xtrain, ytrain)\n",
        "ypred = model.predict(Xtest)\n",
        "mse = mean_squared_error(ytest, ypred)\n",
        "r2 = r2_score(ytest, ypred)\n",
        "cvscores = cross_val_score(model, X, y, cv=10, scoring='neg_mean_squared_error')\n",
        "\n",
        "\n",
        "print(mse)\n",
        "print(r2)"
      ],
      "metadata": {
        "id": "zSHz8IQcc7Iv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install ucimlrepo\n",
        "from ucimlrepo import fetch_ucirepo\n",
        "student_performance = fetch_ucirepo(id=320)\n",
        "X = student_performance.data.features\n",
        "y = student_performance.data.targets\n",
        "\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import Ridge\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from sklearn.datasets import make_regression\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "X, y = make_regression(n_samples=100, n_features=1, noise=0.1, random_state=42)\n",
        "Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "ridge_model = Ridge(alpha=1.0)\n",
        "ridge_model.fit(Xtrain, ytrain)\n",
        "ypred = ridge_model.predict(Xtest)\n",
        "mse = mean_squared_error(ytest, ypred)\n",
        "r2 = r2_score(ytest, ypred)\n",
        "\n",
        "\n",
        "print(mse)\n",
        "print(r2)\n",
        "\n",
        "\n",
        "plt.scatter(Xtest, ytest, color='blue', label='Actual data')\n",
        "plt.plot(Xtest, ypred, color='red', linewidth=2, label='Ridge regression line')\n",
        "plt.title('Ridge Regression: Actual vs Predicted')\n",
        "plt.xlabel('Feature (X)')\n",
        "plt.ylabel('Target (y)')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "sa-La6Xsc-OY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install ucimlrepo\n",
        "from ucimlrepo import fetch_ucirepo\n",
        "student_performance = fetch_ucirepo(id=320)\n",
        "X = student_performance.data.features\n",
        "y = student_performance.data.targets\n",
        "print(student_performance.metadata)\n",
        "print(student_performance.variables)\n",
        "\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.cross_decomposition import PLSRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from sklearn.datasets import make_regression\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "X, y = make_regression(n_samples=100, n_features=10, noise=0.1, random_state=42)\n",
        "Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "plsmodel = PLSRegression(n_components=2)\n",
        "plsmodel.fit(Xtrain, ytrain)\n",
        "ypred = plsmodel.predict(Xtest)\n",
        "mse = mean_squared_error(ytest, ypred)\n",
        "r2 = r2_score(ytest, ypred)\n",
        "\n",
        "\n",
        "print(mse)\n",
        "print(r2)\n",
        "\n",
        "\n",
        "plt.scatter(ytest, ypred, color='blue', label='Predictions vs Actual')\n",
        "plt.plot([min(ytest), max(ytest)], [min(ytest), max(ytest)], color='red', linestyle='--', label='Perfect fit')\n",
        "plt.title('PLS Regression: Actual vs Predicted')\n",
        "plt.xlabel('Actual')\n",
        "plt.ylabel('Predicted')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "rLpo7aZvdBCD"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}