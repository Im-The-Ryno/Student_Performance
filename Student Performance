{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kxp5Kg_4Lkwo",
        "outputId": "ab5e9b8a-2dd1-4037-a4cb-547567b5928f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: ucimlrepo in /usr/local/lib/python3.11/dist-packages (0.0.7)\n",
            "Requirement already satisfied: pandas>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from ucimlrepo) (2.2.2)\n",
            "Requirement already satisfied: certifi>=2020.12.5 in /usr/local/lib/python3.11/dist-packages (from ucimlrepo) (2025.4.26)\n",
            "Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.0.0->ucimlrepo) (2.0.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.0.0->ucimlrepo) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.0.0->ucimlrepo) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.0.0->ucimlrepo) (2025.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas>=1.0.0->ucimlrepo) (1.17.0)\n",
            "              Feature  Coefficient  Std Error  t-Statistic   p-Value\n",
            "0           Intercept     0.951887   1.070992     0.888791  0.376539\n",
            "1                 age     0.005962   0.054240     0.109914  0.912728\n",
            "2                Medu    -0.148594   0.079509    -1.868908  0.064962\n",
            "3                Fedu     0.038378   0.072103     0.532273  0.595878\n",
            "4          traveltime     0.109541   0.080556     1.359805  0.177366\n",
            "5           studytime     0.061696   0.074357     0.829725  0.408940\n",
            "6            failures    -0.210706   0.112569    -1.871789  0.064558\n",
            "7              famrel    -0.041749   0.059565    -0.700898  0.485216\n",
            "8            freetime    -0.107148   0.057240    -1.871911  0.064541\n",
            "9               goout     0.017692   0.055658     0.317876  0.751332\n",
            "10               Dalc    -0.069869   0.076623    -0.911855  0.364336\n",
            "11               Walc     0.026934   0.061532     0.437729  0.662655\n",
            "12             health    -0.055198   0.040255    -1.371225  0.173791\n",
            "13           absences     0.011544   0.012738     0.906260  0.367273\n",
            "14                 G1     0.172172   0.041246     4.174255  0.000070\n",
            "15                 G2     0.858834   0.037889    22.667080  0.000000\n",
            "16          school_MS    -0.304551   0.142888    -2.131394  0.035845\n",
            "17              sex_M    -0.083599   0.130376    -0.641216  0.523049\n",
            "18          address_U     0.104781   0.134772     0.777464  0.438970\n",
            "19        famsize_LE3     0.078625   0.128769     0.610592  0.543043\n",
            "20          Pstatus_T    -0.023580   0.185882    -0.126854  0.899345\n",
            "21        Mjob_health     0.343000   0.285145     1.202898  0.232242\n",
            "22         Mjob_other    -0.125821   0.154859    -0.812486  0.418705\n",
            "23      Mjob_services     0.259923   0.192429     1.350746  0.180240\n",
            "24       Mjob_teacher     0.302682   0.263505     1.148675  0.253803\n",
            "25        Fjob_health    -0.308570   0.430780    -0.716306  0.475699\n",
            "26         Fjob_other    -0.330553   0.231288    -1.429183  0.156492\n",
            "27      Fjob_services    -0.530630   0.243403    -2.180047  0.031924\n",
            "28       Fjob_teacher    -0.535769   0.368264    -1.454852  0.149268\n",
            "29        reason_home    -0.123675   0.145521    -0.849875  0.397701\n",
            "30       reason_other    -0.418710   0.193776    -2.160797  0.033428\n",
            "31  reason_reputation    -0.144015   0.154631    -0.931346  0.354223\n",
            "32    guardian_mother    -0.008693   0.140566    -0.061845  0.950827\n",
            "33     guardian_other     0.322548   0.279199     1.155264  0.251110\n",
            "34      schoolsup_yes    -0.157658   0.193105    -0.816435  0.416456\n",
            "35         famsup_yes     0.120459   0.119012     1.012154  0.314239\n",
            "36           paid_yes    -0.192358   0.233990    -0.822077  0.413255\n",
            "37     activities_yes    -0.039472   0.115241    -0.342519  0.732777\n",
            "38        nursery_yes    -0.060901   0.139254    -0.437336  0.662939\n",
            "39         higher_yes     0.050896   0.198141     0.256867  0.797881\n",
            "40       internet_yes     0.112868   0.142294     0.793208  0.429790\n",
            "41       romantic_yes     0.060722   0.120526     0.503813  0.615652\n",
            "\n",
            "R-squared: 0.8487\n",
            "Mean Squared Error: 1.4759\n"
          ]
        }
      ],
      "source": [
        "!pip install ucimlrepo\n",
        "from ucimlrepo import fetch_ucirepo\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from scipy import stats\n",
        "\n",
        "student_performance = fetch_ucirepo(id=320)\n",
        "data = pd.concat([student_performance.data.features, student_performance.data.targets], axis=1)\n",
        "X = data.drop(columns=['G3'])\n",
        "y = data['G3']\n",
        "X = pd.get_dummies(X, drop_first=True).astype(float)\n",
        "y = y.astype(float)\n",
        "Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "Xtrain_np = np.column_stack([np.ones(Xtrain.shape[0]), Xtrain.values])\n",
        "Xtest_np = np.column_stack([np.ones(Xtest.shape[0]), Xtest.values])\n",
        "\n",
        "model = LinearRegression(fit_intercept=False)\n",
        "model.fit(Xtrain_np, ytrain)\n",
        "ypred = model.predict(Xtest_np)\n",
        "\n",
        "r2 = r2_score(ytest, ypred)\n",
        "mse = mean_squared_error(ytest, ypred)\n",
        "residuals = ytest.to_numpy().ravel() - ypred.ravel()\n",
        "n = Xtest_np.shape[0]\n",
        "p = Xtest_np.shape[1]\n",
        "\n",
        "mse_train = mean_squared_error(ytrain, model.predict(Xtrain_np))\n",
        "XTX_inv = np.linalg.inv(Xtrain_np.T @ Xtrain_np)\n",
        "var_b = mse_train * np.diag(XTX_inv)\n",
        "se_b = np.sqrt(var_b)\n",
        "coeffs = model.coef_\n",
        "t_stats = coeffs / se_b\n",
        "p_values = 2 * (1 - stats.t.cdf(np.abs(t_stats), df=n - p))\n",
        "\n",
        "feature_names = ['Intercept'] + list(X.columns)\n",
        "results = pd.DataFrame({\n",
        "    'Feature': feature_names,\n",
        "    'Coefficient': coeffs,\n",
        "    'Std Error': se_b,\n",
        "    't-Statistic': t_stats,\n",
        "    'p-Value': p_values\n",
        "})\n",
        "\n",
        "pd.set_option('display.max_rows', None)\n",
        "print(results)\n",
        "print(f\"\\nR-squared: {r2:.4f}\")\n",
        "print(f\"Mean Squared Error: {mse:.4f}\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install ucimlrepo\n",
        "from ucimlrepo import fetch_ucirepo\n",
        "student_performance = fetch_ucirepo(id=320)\n",
        "X = student_performance.data.features\n",
        "y = student_performance.data.targets\n",
        "\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split, cross_val_score\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from sklearn.datasets import make_regression\n",
        "\n",
        "\n",
        "X, y = make_regression(n_samples=100, n_features=1, noise=0.1, random_state=42)\n",
        "\n",
        "\n",
        "Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "model = LinearRegression()\n",
        "model.fit(Xtrain, ytrain)\n",
        "ypred = model.predict(Xtest)\n",
        "mse = mean_squared_error(ytest, ypred)\n",
        "r2 = r2_score(ytest, ypred)\n",
        "cvscores = cross_val_score(model, X, y, cv=10, scoring='neg_mean_squared_error')\n",
        "\n",
        "\n",
        "print(mse)\n",
        "print(r2)"
      ],
      "metadata": {
        "id": "WeqJimyGa0D2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install ucimlrepo\n",
        "from ucimlrepo import fetch_ucirepo\n",
        "student_performance = fetch_ucirepo(id=320)\n",
        "X = student_performance.data.features\n",
        "y = student_performance.data.targets\n",
        "\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import Ridge\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from sklearn.datasets import make_regression\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "X, y = make_regression(n_samples=100, n_features=1, noise=0.1, random_state=42)\n",
        "Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "ridge_model = Ridge(alpha=1.0)\n",
        "ridge_model.fit(Xtrain, ytrain)\n",
        "ypred = ridge_model.predict(Xtest)\n",
        "mse = mean_squared_error(ytest, ypred)\n",
        "r2 = r2_score(ytest, ypred)\n",
        "\n",
        "\n",
        "print(mse)\n",
        "print(r2)\n",
        "\n",
        "\n",
        "plt.scatter(Xtest, ytest, color='blue', label='Actual data')\n",
        "plt.plot(Xtest, ypred, color='red', linewidth=2, label='Ridge regression line')\n",
        "plt.title('Ridge Regression: Actual vs Predicted')\n",
        "plt.xlabel('Feature (X)')\n",
        "plt.ylabel('Target (y)')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "CdgpYp_Ia0rD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install ucimlrepo\n",
        "from ucimlrepo import fetch_ucirepo\n",
        "student_performance = fetch_ucirepo(id=320)\n",
        "X = student_performance.data.features\n",
        "y = student_performance.data.targets\n",
        "print(student_performance.metadata)\n",
        "print(student_performance.variables)\n",
        "\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.cross_decomposition import PLSRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from sklearn.datasets import make_regression\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "X, y = make_regression(n_samples=100, n_features=10, noise=0.1, random_state=42)\n",
        "Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "plsmodel = PLSRegression(n_components=2)\n",
        "plsmodel.fit(Xtrain, ytrain)\n",
        "ypred = plsmodel.predict(Xtest)\n",
        "mse = mean_squared_error(ytest, ypred)\n",
        "r2 = r2_score(ytest, ypred)\n",
        "\n",
        "\n",
        "print(mse)\n",
        "print(r2)\n",
        "\n",
        "\n",
        "plt.scatter(ytest, ypred, color='blue', label='Predictions vs Actual')\n",
        "plt.plot([min(ytest), max(ytest)], [min(ytest), max(ytest)], color='red', linestyle='--', label='Perfect fit')\n",
        "plt.title('PLS Regression: Actual vs Predicted')\n",
        "plt.xlabel('Actual')\n",
        "plt.ylabel('Predicted')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "M9h06fP5a39c"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}