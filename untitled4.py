# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FLq5rRhzicLfv9Call2Zx8EWuxOSADFQ
"""

!pip install ucimlrepo
from ucimlrepo import fetch_ucirepo
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from scipy import stats

student_performance = fetch_ucirepo(id=320)
data = pd.concat([student_performance.data.features, student_performance.data.targets], axis=1)
X = data.drop(columns=['G3'])
y = data['G3']
X = pd.get_dummies(X, drop_first=True).astype(float)
y = y.astype(float)
Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=42)
Xtrain_np = np.column_stack([np.ones(Xtrain.shape[0]), Xtrain.values])
Xtest_np = np.column_stack([np.ones(Xtest.shape[0]), Xtest.values])

model = LinearRegression(fit_intercept=False)
model.fit(Xtrain_np, ytrain)
ypred = model.predict(Xtest_np)

r2 = r2_score(ytest, ypred)
mse = mean_squared_error(ytest, ypred)
residuals = ytest.to_numpy().ravel() - ypred.ravel()
n = Xtest_np.shape[0]
p = Xtest_np.shape[1]

mse_train = mean_squared_error(ytrain, model.predict(Xtrain_np))
XTX_inv = np.linalg.inv(Xtrain_np.T @ Xtrain_np)
var_b = mse_train * np.diag(XTX_inv)
se_b = np.sqrt(var_b)
coeffs = model.coef_
t_stats = coeffs / se_b
p_values = 2 * (1 - stats.t.cdf(np.abs(t_stats), df=n - p))

feature_names = ['Intercept'] + list(X.columns)
results = pd.DataFrame({
    'Feature': feature_names,
    'Coefficient': coeffs,
    'Std Error': se_b,
    't-Statistic': t_stats,
    'p-Value': p_values
})

pd.set_option('display.max_rows', None)
print(results)
print(f"\nR-squared: {r2:.4f}")
print(f"Mean Squared Error: {mse:.4f}")

!pip install ucimlrepo
from ucimlrepo import fetch_ucirepo
student_performance = fetch_ucirepo(id=320)
X = student_performance.data.features
y = student_performance.data.targets


import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.datasets import make_regression


X, y = make_regression(n_samples=100, n_features=1, noise=0.1, random_state=42)


Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(Xtrain, ytrain)
ypred = model.predict(Xtest)
mse = mean_squared_error(ytest, ypred)
r2 = r2_score(ytest, ypred)
cvscores = cross_val_score(model, X, y, cv=10, scoring='neg_mean_squared_error')


print(mse)
print(r2)

!pip install ucimlrepo
from ucimlrepo import fetch_ucirepo
student_performance = fetch_ucirepo(id=320)
X = student_performance.data.features
y = student_performance.data.targets


import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.datasets import make_regression
import matplotlib.pyplot as plt


X, y = make_regression(n_samples=100, n_features=1, noise=0.1, random_state=42)
Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=42)
ridge_model = Ridge(alpha=1.0)
ridge_model.fit(Xtrain, ytrain)
ypred = ridge_model.predict(Xtest)
mse = mean_squared_error(ytest, ypred)
r2 = r2_score(ytest, ypred)


print(mse)
print(r2)


plt.scatter(Xtest, ytest, color='blue', label='Actual data')
plt.plot(Xtest, ypred, color='red', linewidth=2, label='Ridge regression line')
plt.title('Ridge Regression: Actual vs Predicted')
plt.xlabel('Feature (X)')
plt.ylabel('Target (y)')
plt.legend()
plt.show()

!pip install ucimlrepo
from ucimlrepo import fetch_ucirepo
student_performance = fetch_ucirepo(id=320)
X = student_performance.data.features
y = student_performance.data.targets
print(student_performance.metadata)
print(student_performance.variables)


import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.cross_decomposition import PLSRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.datasets import make_regression
import matplotlib.pyplot as plt


X, y = make_regression(n_samples=100, n_features=10, noise=0.1, random_state=42)
Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=42)
plsmodel = PLSRegression(n_components=2)
plsmodel.fit(Xtrain, ytrain)
ypred = plsmodel.predict(Xtest)
mse = mean_squared_error(ytest, ypred)
r2 = r2_score(ytest, ypred)


print(mse)
print(r2)


plt.scatter(ytest, ypred, color='blue', label='Predictions vs Actual')
plt.plot([min(ytest), max(ytest)], [min(ytest), max(ytest)], color='red', linestyle='--', label='Perfect fit')
plt.title('PLS Regression: Actual vs Predicted')
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.legend()
plt.show()